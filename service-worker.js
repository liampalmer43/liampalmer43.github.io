"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/me/index.html","9fa32caa9945a1444b2760b365bd9784"],["/me/static/css/main.afc419c7.css","ab114b2809625aef249f3a76b5bde320"],["/me/static/js/main.e2c61bdc.js","cbb10015c24d81fb552fdcf5476c0094"],["/me/static/media/CS489_ML_Report.ffb096bc.pdf","ffb096bca524b1b229e1ee8ae0d0be8c"],["/me/static/media/KWClassicW16.7b06ae9b.jpg","7b06ae9bc3d93d83841e3ee91417dfda"],["/me/static/media/Liam_Resume.4e84e63a.pdf","4e84e63afe41ac93138097cfbcb02080"],["/me/static/media/Liam_Transcript.510a6d15.pdf","510a6d15dadf5de5be422e02e16db4f9"],["/me/static/media/adroll_logo.17227a86.jpg","17227a86388e8a28b2c326f9ff6db3cc"],["/me/static/media/cbva.c6df7a8e.jpg","c6df7a8e12afb10ad5551045274bf37a"],["/me/static/media/cyprus1.47f3cd9e.jpg","47f3cd9efeb04214de5628c564b6199a"],["/me/static/media/cyprus2.87e387df.jpg","87e387dfc81a4f978f13ee1dc3ca6296"],["/me/static/media/intramuralF16.cc4a9f20.jpeg","cc4a9f20127903f1e6d182640e1883e2"],["/me/static/media/intramuralW16.2012354b.jpeg","2012354bbb990c0d59cbb427bad7b40d"],["/me/static/media/intramuralW17.92889d85.jpg","92889d856d60c63d49fd4f38ebfb00bb"],["/me/static/media/oracle_logo.3498e2d2.png","3498e2d2f6612f3d620c9851b63889c2"],["/me/static/media/sidefx_logo.03a55c3e.png","03a55c3e4176b9d1241ca18d02435db3"],["/me/static/media/u18.6faea2c5.jpeg","6faea2c50238af4130ae1d1a412fe67a"],["/me/static/media/u22.355584f3.jpeg","355584f3b6801926fdf6f8e314978884"],["/me/static/media/uwaterloo_logo.d9cda810.gif","d9cda810fe25048254fe31aaaa08ca8c"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,t){var a=new URL(e);return a.hash="",a.search=a.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),a.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(a){if(!t.has(a)){var n=new Request(a,{credentials:"same-origin"});return fetch(n).then(function(t){if(!t.ok)throw new Error("Request for "+a+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(a,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(a){return Promise.all(a.map(function(a){if(!t.has(a.url))return e.delete(a)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,a=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching);(t=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,"index.html"),t=urlsToCacheKeys.has(a));!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(a=new URL("/me/index.html",self.location).toString(),t=urlsToCacheKeys.has(a)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});